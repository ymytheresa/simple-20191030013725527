/*
 * BOCHK FinTech Hackathon 2018 API (Frontend)
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.14 (20180124)
 * Contact: it_innovation_lab@bochk.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bochk.hackathon.api.oauth.model;

import java.util.Objects;
import com.bochk.hackathon.api.oauth.model.Currency;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * MoneyTransferFpsRequest
 */
public class MoneyTransferFpsRequest {
  @SerializedName("currency")
  private Currency currency = null;

  @SerializedName("amount")
  private Double amount = null;

  /**
   * Type of information in the dst_info field
   */
  @JsonAdapter(DstInfoTypeEnum.Adapter.class)
  public enum DstInfoTypeEnum {
    PHONE_NO("FPS_PHONE_NO"),
    
    EMAIL("FPS_EMAIL"),
    
    ID("FPS_ID");

    private String value;

    DstInfoTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DstInfoTypeEnum fromValue(String text) {
      for (DstInfoTypeEnum b : DstInfoTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DstInfoTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DstInfoTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DstInfoTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DstInfoTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("dst_info_type")
  private DstInfoTypeEnum dstInfoType = null;

  @SerializedName("dst_info")
  private String dstInfo = null;

  @SerializedName("remark")
  private String remark = null;

  public MoneyTransferFpsRequest currency(Currency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @ApiModelProperty(required = true, value = "")
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }

  public MoneyTransferFpsRequest amount(Double amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Amount to transfer
   * @return amount
  **/
  @ApiModelProperty(required = true, value = "Amount to transfer")
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }

  public MoneyTransferFpsRequest dstInfoType(DstInfoTypeEnum dstInfoType) {
    this.dstInfoType = dstInfoType;
    return this;
  }

   /**
   * Type of information in the dst_info field
   * @return dstInfoType
  **/
  @ApiModelProperty(required = true, value = "Type of information in the dst_info field")
  public DstInfoTypeEnum getDstInfoType() {
    return dstInfoType;
  }

  public void setDstInfoType(DstInfoTypeEnum dstInfoType) {
    this.dstInfoType = dstInfoType;
  }

  public MoneyTransferFpsRequest dstInfo(String dstInfo) {
    this.dstInfo = dstInfo;
    return this;
  }

   /**
   * Information of the money transfer destination
   * @return dstInfo
  **/
  @ApiModelProperty(required = true, value = "Information of the money transfer destination")
  public String getDstInfo() {
    return dstInfo;
  }

  public void setDstInfo(String dstInfo) {
    this.dstInfo = dstInfo;
  }

  public MoneyTransferFpsRequest remark(String remark) {
    this.remark = remark;
    return this;
  }

   /**
   * Free text remark
   * @return remark
  **/
  @ApiModelProperty(value = "Free text remark")
  public String getRemark() {
    return remark;
  }

  public void setRemark(String remark) {
    this.remark = remark;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MoneyTransferFpsRequest moneyTransferFpsRequest = (MoneyTransferFpsRequest) o;
    return Objects.equals(this.currency, moneyTransferFpsRequest.currency) &&
        Objects.equals(this.amount, moneyTransferFpsRequest.amount) &&
        Objects.equals(this.dstInfoType, moneyTransferFpsRequest.dstInfoType) &&
        Objects.equals(this.dstInfo, moneyTransferFpsRequest.dstInfo) &&
        Objects.equals(this.remark, moneyTransferFpsRequest.remark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, amount, dstInfoType, dstInfo, remark);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MoneyTransferFpsRequest {\n");
    
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    dstInfoType: ").append(toIndentedString(dstInfoType)).append("\n");
    sb.append("    dstInfo: ").append(toIndentedString(dstInfo)).append("\n");
    sb.append("    remark: ").append(toIndentedString(remark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

